package assignments;

import umontreal.ssj.randvar.ExponentialGen;
import umontreal.ssj.rng.RandomStream;
import umontreal.ssj.simevents.Event;
import umontreal.ssj.simevents.Sim;
import umontreal.ssj.stat.TallyStore;

/**
 * @author mctenthij
 * Edited by qvanderkaaij and jberkhout
 */
public class Ambulance extends Event {

	// ambulance variables
	int id;
	Region baseRegion;
	Accident currentAccident;
	boolean servesOutsideRegion;
	double drivingTimeHospitalToBase;

	// RNG
	ExponentialGen serviceTimeGen;

	// stats counters
	TallyStore waitTimeTally = new TallyStore("Waiting times");
	TallyStore serviceTimeTally = new TallyStore("Service times");
	TallyStore withinTargetTally = new TallyStore("Arrival within target");

	public Ambulance(int id, Region baseRegion, RandomStream serviceRandomStream, double serviceRate, boolean servesOutsideRegion) {
		this.id = id;
		currentAccident = null;
		this.baseRegion = baseRegion;
		serviceTimeGen = new ExponentialGen(serviceRandomStream, serviceRate);
		this.servesOutsideRegion = servesOutsideRegion;
		this.drivingTimeHospitalToBase = drivingTimeHospitalToBase();
	}

    public void startService(Accident accident, double arrivalTimeAtAccident) {
        currentAccident = accident;
        accident.serviceStarted(arrivalTimeAtAccident);
        double serviceTimeAtScene = serviceTimeGen.nextDouble();
        double busyServing = 0.0; // calculate the time needed to process the accident and drive back to the base
        schedule(busyServing); // after busyServing it becomes idle again
    }

    public void serviceCompleted() {
        // process the completed current accident: the ambulance brought the
        // patient to the hospital and is back at its base, what next?
    	
    	currentAccident.completed(drivingTimeHospitalToBase);
    	waitTimeTally.add(currentAccident.getWaitTime());
    	serviceTimeTally.add(currentAccident.getServiceTime());
    	
    	
    	if(baseRegion.queue.size() > 0) { //serve the first call from the queue
    		baseRegion.idleAmbulances.getFirst().startService(baseRegion.queue.getFirst(), drivingTimeToAccident(baseRegion.queue.getFirst()));
    		baseRegion.idleAmbulances.removeFirst();
    		baseRegion.queue.removeFirst();
    	}
    	
    	if(currentAccident.getWaitTime() < Hospital.RESPONSE_TIME_TARGET) {
    		withinTargetTally.add(1); // only add the ones that are less than 15
    		baseRegion.idleAmbulances.addLast(this); // puts the ambulance back in the queue 
    	}
    		
    		
    	
    }

    // return Euclidean distance between accident and hospital
    public double drivingTimeToAccident(Accident cust) {
        // calculate the driving time from the base location of the ambulance to the accident location
    	double[] baseLocation = baseRegion.baseLocation;
    	double[] accidentLocation = cust.getLocation();
    	double drivingTimeAccident = Math.sqrt((Math.pow(baseLocation[0]-accidentLocation[0],2)) + (Math.pow(baseLocation[1]-accidentLocation[1],2))); // driving time = driving distance 
    
        return drivingTimeAccident;
    }

    // return Euclidean distance between accident and hospital
    public double drivingTimeToHostital(Accident cust) {
        // calculate the driving time from accident location to the hospital
    	double[] accidentLocation = cust.getLocation();
    	double[] hospitalLocation = new double[2];
    	hospitalLocation[0] = 10.19; //from h0pspital to edge on x-axes
    	hospitalLocation[1] = (Math.cos(Math.PI / 3) * 5) * 3; // from hospital to edge on y-axes
    	double drivingTimeHospital = Math.sqrt((Math.pow(hospitalLocation[0]-accidentLocation[0],2)) + (Math.pow(hospitalLocation[1]-accidentLocation[1],2)));
    	
        return drivingTimeHospital;
    }

	// return Euclidean distance from the hospital to the base
	public double drivingTimeHospitalToBase() {
        // calculate the driving time from the hospital to the base
		double[] hospitalLocation = new double[2];
		hospitalLocation[0] = 10.19; //from h0pspital to edge on x-axes
    	hospitalLocation[1] = (Math.cos(Math.PI / 3) * 5) * 3; // from hospital to edge on y-axes
    	double[] baseLocation = baseRegion.baseLocation;
    	double drivingTimeBase = Math.sqrt((Math.pow(baseLocation[0]- baseLocation[0],2)) + (Math.pow(baseLocation[1]- baseLocation[1],2)));
    	
        return drivingTimeBase;
		
	}

    // event: the ambulance is back at its base after completing service
    @Override
    public void actions() {
        serviceCompleted();
    }


}
