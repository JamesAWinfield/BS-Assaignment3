package assignments;

import java.util.LinkedList;
import umontreal.ssj.randvar.ExponentialGen;
import umontreal.ssj.rng.RandomStream;
import umontreal.ssj.simevents.Event;
import umontreal.ssj.simevents.Sim;

/**
 * @author A van Oostveen
 * Edited by J Berkhout
 */
public class Region {

    // region variables
	LinkedList<Accident> queue; // for the unadressed accidents
	LinkedList<Ambulance> idleAmbulances;
	double[] baseLocation; // of the particular region
	ArrivalProcess arrivalProcess;
	int regionID;
	Region[] regions;
	int numRegions;

	RandomStream locationStream; // random number generator for locations
    
	public Region(int id, double[] baseLocation, RandomStream arrivalRandomStream, double arrivalRate, RandomStream locationRandomStream, Region[] regionArray, int numRegions) {

		// set region variables
		queue = new LinkedList<>();
		idleAmbulances = new LinkedList<>();
		this.baseLocation = baseLocation;
		regionID = id;
		this.regions = regionArray;
		this.numRegions = numRegions;

		// set random streams
		arrivalProcess = new ArrivalProcess(arrivalRandomStream, arrivalRate);
		locationStream = locationRandomStream;
	}
    
    public void handleArrival() {
        // create and process a new accident
    	
    	Accident newAccident = new Accident(Sim.time(), drawLocation(), regionID);
    	Ambulance firstAmbulanceAvailable = null;
    	Ambulance closestAmbulance = null;
    	double maxDistanceAccident = 1000; //1km = 1000m
    	
    	for(int i = 0; i < numRegions; i++) {
    		while(regions[i].idleAmbulances.size() > 0) {
    			if(regions[i].queue.size() == 0 && regions[i].idleAmbulances.getFirst().drivingTimeToAccident(newAccident) < maxDistanceAccident) {
    			closestAmbulance = regions[i].idleAmbulances.getFirst();
    			}
    		}
    	}
    	
    	
    	firstAmbulanceAvailable.startService(newAccident, Sim.time() + firstAmbulanceAvailable.drivingTimeToAccident(newAccident));
    	
    	
    	}

    // returns a random location inside the region
    public double[] drawLocation() {
        // determine the location of the accident
    	
    	
        double[] location = new double[2];
        double selectRandomLocation1 = locationStream.nextDouble();
        double selectRandomLocation2 = locationStream.nextDouble();
        location[0] = baseLocation[0] + selectRandomLocation1; // X-Coordinate of accident location
        location[1] = baseLocation[1] + selectRandomLocation2; // Y-Coordinate of accident location
        double YaxesEdge = (Math.cos(Math.PI / 3) * 5) * 3;
        double XaxesEdge = 10.19;
        return location;
        
        
        
    }
    
	class ArrivalProcess extends Event {

		ExponentialGen arrivalTimeGen;
		double arrivalRate;

		public ArrivalProcess(RandomStream rng, double arrivalRate) {
			this.arrivalRate = arrivalRate;
			arrivalTimeGen = new ExponentialGen(rng, arrivalRate);
		}

		// event: new customer arrival at the store
		@Override
		public void actions() {
			handleArrival();
			double nextArrival = arrivalTimeGen.nextDouble();
			schedule(nextArrival); // schedule a new arrival event
		}

		public void init() {
			double nextArrival = arrivalTimeGen.nextDouble();
			schedule(nextArrival); // schedule a first new arrival
		}
	}
}


