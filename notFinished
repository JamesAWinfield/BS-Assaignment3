package assignments;

 
import java.util.HashSet;
import java.util.Random;
import umontreal.ssj.probdist.StudentDist;
import umontreal.ssj.rng.MRG32k3a;
import umontreal.ssj.stat.TallyStore;
import umontreal.ssj.rng.MRG32k3a;
/**
 * Template Assignment 3.
 *
 * @author mctenthij
 * Edited by qvanderkaaij and jberkhout
 */

public class Assignment3 {

	// optimization variables
    Solution[] solutionsList;
    int numbSolutions;
    int budget;
    int kMin;
    int kMax;
    int KMin;
    int KMax;
    
    // threshold queue variables
    double arrivalRate;
    double lowServiceRate;
    double highServiceRate;
    double stopTime;
    double costsLow;
    double costsHigh;
    Random RNG = new Random(0L); // in case a random number is needed
    
    public Assignment3(int kMin, int kMax, int KMin, int KMax, int budget, double arrivalRate, double muLow, double muHigh, double costsLow, double costsHigh, double stopTime) {
     // check how many solutions are possible
    	
     int kRange = kMax - kMin + 1;
        int KRange = KMax - KMin + 1;
        numbSolutions = kRange * KRange;
        // create all solutions and store them in solutionsList[]
        solutionsList = new Solution[numbSolutions];
        
        for (int i = 0; i < kRange; i++) {
            for (int j = 0; j < KRange; j++) {
                Solution solution = new Solution(kMin + i, KMin + j);
                solutionsList[KRange * i + j] = solution;
            }
        }
        
        
        // set optimization variables
        this.budget = budget;
        this.KMin = KMin;
        this.kMin = kMin;
        this.KMax = KMax;
        this.kMax = kMax;
        
        // set threshold queue variables
        this.arrivalRate = arrivalRate;
        this.lowServiceRate = muLow;
        this.highServiceRate = muHigh;
        this.stopTime = stopTime;
        this.costsLow = costsLow;
        this.costsHigh = costsHigh;
    }
// represents a threshold setting and its simulation results
    
    class Solution {
        int kValue;
        int KValue;
        TallyStore simResults;
        public Solution(int k, int K) {
            this.kValue = k;
            this.KValue = K;
            this.simResults = new TallyStore("Simulation results ("+k+", "+K+")");
        }
    }
    
    
    // calculates the index position of solution (k, K) in the solutionsList
    public int calcSolutionPosition(int k, int K) {
        return (k - kMin) * (KMax - KMin + 1) + K - KMin;
    }
    
    
    // returns the solution object corresponding to (k, K)
    public Solution getSolution(int k, int K) {
        return solutionsList[calcSolutionPosition(k, K)];
    }
    
    
    // prints the simulation results of solution
    public void printSolutionResults(Solution solution) {
        System.out.print("Solution (");
        System.out.print(solution.kValue);
        System.out.print(", ");
        System.out.print(solution.KValue);
        System.out.print(") is simulated ");
        System.out.print(solution.simResults.numberObs());
        if (solution.simResults.numberObs() > 1) {
            // we can calculate average and (unbiased) standard deviation
            System.out.print(" times and has an average costs of ");
            System.out.print(solution.simResults.average());
            System.out.print(" with standard deviation of ");
            System.out.print(solution.simResults.standardDeviation());
            System.out.println(".");
        } else if (solution.simResults.numberObs() == 1) {
            // only one sample: only report sample = average
            System.out.print(" time and got a value of ");
            System.out.print(solution.simResults.average());
            System.out.println(".");
        } else {
            System.out.println(" times and therefore has no statistics.");
        }
    }
    
    
    // prints simulation results of all solutions
    public void printAllSolutionsResults() {
        for (int i = 0; i < numbSolutions; i++) {
            printSolutionResults(solutionsList[i]);
        }
    }
    
    
    // returns best simulated solution (only simulated solutions considered)
    public Solution getBestSimulatedSolution() {
        double minimum = Double.POSITIVE_INFINITY;
        Solution optSolution = null;
        for (int i = 0; i < numbSolutions; i++) {
            if (solutionsList[i].simResults.numberObs() > 0) {
                if (solutionsList[i].simResults.average() < minimum) {
                    minimum = solutionsList[i].simResults.average();
                    optSolution = solutionsList[i];
                }
            }
        }
        return optSolution;
    }
    
    
    // returns a RNG that starts from a random seed
    public MRG32k3a getRNG() {
        // TO DO: create a random seed, for example using RNG
    	
        Random random = new Random();
        
        
        for (int i=0; i<6; i++) {
        	this.seed[i] = Long.parseLong(Long.toString(RNG.nextLong()).substring(0, 6));
        }

        // create RNG based on seed
        MRG32k3a RNG = new MRG32k3a();
        RNG.setSeed(this.seed);

        return RNG;
        
        
        
    }
    
    
    // returns a RNG for a given seed (useful for replication purposes)
    public MRG32k3a getRNG(long[] seed) {
    	
        MRG32k3a randomStream = new MRG32k3a();
        randomStream.setSeed(seed);
        return randomStream;
    }
    
    
    
    // simulates solution (k, K) and returns the average costs
    public double simulateSolution(int k, int K) {
        // init random sources
     MRG32k3a arrivalRNG = getRNG();
        MRG32k3a serviceRNG = getRNG();
        // create threshold queue model
        ThresholdQueue model = new ThresholdQueue(arrivalRate, lowServiceRate, highServiceRate, costsLow, costsHigh, stopTime, k, K, arrivalRNG, serviceRNG);
        return model.simulateRunningCosts().average();
    }
    
    
    
    // performs ranking and selection and returns best solution:
    // simulates all solutions initialRuns times, and afterwards evenly divides
    // the remaining budget over all solutions that are not significantly
    // outperformed with level alpha
    public Solution runRankingSelection(int initialRuns, double alpha, boolean verbose) {
        // TO DO: perform initial runs
    	
    	int currentNumberOfSimulations = 0; 
    	
    	long[] arrivalSeed = new long[6];
    	
    	for(int i = 0; i < arrivalSeed.length; i ++) { //random arrival generator
    		arrivalSeed[i] = RNG.nextInt();
    	}
    	
    	long[] serviceSeed = new long[6]; 
    	
    	while(currentNumberOfSimulations == 0) {
    	
    	for(int i = 0; i < serviceSeed.length; i ++) { //random service generator
    		serviceSeed[i] = RNG.nextInt();
    	}
    	
    	for(int i = 0; i < numbSolutions; i++) {
    		 MRG32k3a arrivals = getRNG(arrivalSeed); 
    		 MRG32k3a services = getRNG(serviceSeed); 
    		 ThresholdQueue newModel = new ThresholdQueue(arrivalRate,lowServiceRate, highServiceRate, costsLow, costsHigh, stopTime, solutionsList[i].kValue, solutionsList[i].KValue, arrivals, services);
    		 currentNumberOfSimulations += 1;
    	}
    	
    	
    	for(int i = 0; i < arrivalSeed.length; i++) {
    		arrivalSeed[i] = RNG.nextInt();
    	}
    	
    	for(int i = 0; i < serviceSeed.length; i++) {
    		serviceSeed[i] = RNG.nextInt();
    	
    	}
    	}
    	
    	
    	currentNumberOfSimulations =+ numbSolutions; 
    	
    	
    	
        HashSet<Solution> I = selectCandidateSolutions(alpha);
        // TO DO: perform rest of the runs
        
        while(currentNumberOfSimulations < budget) { 
        	
        	MRG32k3a arrivals = getRNG(arrivalSeed); 
   		 	MRG32k3a services = getRNG(serviceSeed); 
   		 	
   		 	for(int i = 0; i < numbSolutions; i++) {
   		 		
   		 		if(I.contains(solutionsList[i])) {
   		 		ThresholdQueue newModel = new ThresholdQueue(arrivalRate,lowServiceRate, highServiceRate, costsLow, costsHigh, stopTime, solutionsList[i].kValue, solutionsList[i].KValue, arrivals, services);
   		 		currentNumberOfSimulations += 1;
   		 			
   		 		}
   		 	}
        
   		 	for(int i = 0; i < arrivalSeed.length; i ++) { //random arrival generator
    		arrivalSeed[i] = RNG.nextInt();
   		 	}
    	
    	
   		 	for(int i = 0; i < serviceSeed.length; i ++) { //random service generator
    		serviceSeed[i] = RNG.nextInt();
   		 	}
   		 	
    	}
    	
    	
    	currentNumberOfSimulations =+ numbSolutions; 
        
        
        
        return getBestSimulatedSolution();
    }
    
    
    // returns not significantly outperformed solutions with level alpha
    public HashSet<Solution> selectCandidateSolutions(double alpha) {
        HashSet<Solution> I = new HashSet(); // set of candidate solutions
        // TO DO: find all candidate solutions for the ranking and selection
        // method and add them to I
        
       Solution optimalSolution = getBestSimulatedSolution(); 
       double optimalAverage = optimalSolution.simResults.average();
       double optimalVariance = optimalSolution.simResults.variance();
       double optimalStandardDev = optimalSolution.simResults.standardDeviation();
       double lamda = WHAT IS THIS VALUE?;
       
       for(int i = 0; i < numbSolutions; i++) {
    	   double bestAverage = solutionsList[i].simResults.average();
    	   double bestVariance = solutionsList[i].simResults.variance();
    	   double bestStandardDev = solutionsList[i].simResults.standardDeviation();
      
    	   
    	   if(bestAverage <= lamda) {
    		   I.add(solutionsList[i]);
    	   }
       }
        
        
        
        return I;
    }
    
    
    // performs the local search algorithm starting from random solution
    public Solution runLocalSearch() {
        // TO DO: perform local search here
    	
    	int simulations = 5000; 
        
        Solution neighbour;
    	Solution currentSolution = getRandomSolution();
    	for (int i=0; i < this.budget; i++) {
    		neighbour = this.getRandomNeighbor(currentSolution);
    		currentSolution = this.compareTwoSolutions(currentSolution, neighbour);
    	}

        return getBestSimulatedSolution();
        
        
        
    }
    
    
    
    // returns solution with lowest average costs
    public Solution compareTwoSolutions(Solution sol1, Solution sol2){
        // TO DO: return the best solution
    	
        
       double[] results = simulateTwoSolutionsWithCRN(sol1.kValue, sol1.KValue, sol2.kValue, sol2.KValue, false);
    	if(results[0] < results[1]) {
    		return sol1;
    	}else {
    		return sol2;
    	}
        
    }
    
    
    // returns a random solution
    public Solution getRandomSolution() {
        Solution randomSolution;
        // TO DO: generate a random solution
        
        MRG32k3a RNG = this.getRNG();
        int rngChoice = RNG.nextInt(0, this.solutionsList.length);
        randomSolution = this.solutionsList[rngChoice];
        return randomSolution;
        
    }
    
    
    // return a random solution from the neighborhood of given solution
    public Solution getRandomNeighbor (Solution solution) {
        Solution randomNeighbor;
        // TO DO: generate a random neighbor of solution
        
        MRG32k3a RNG = getRNG();
        int kvalue1 = solution.kValue;
        int kvalue2 = solution.KValue;
        while (true) {
        	int changed = 0;
        	int selectedX = RNG.nextInt(-1, 1);
            int selectedY = RNG.nextInt(-1, 1);
            changed += Math.abs(selectedX);
            changed += Math.abs(selectedY);
            if (kvalue1 + selectedX <= this.kMax && kvalue1 + selectedX >= this.kMin) {
            	if (kvalue2 + selectedY <= this.KMax && kvalue2 + selectedY >= this.KMin) {
            		if (changed != 0) {
            			kvalue1 += selectedX;
            			kvalue2 += selectedY;
            			randomNeighbor = getSolution(kvalue1, kvalue2);
            			break;
            		}
            	}
            }
        }
        return randomNeighbor;
    }
    
    
    
    // simulates (k, K) and (k2, K2) with CRN and return their average costs
    public double[] simulateTwoSolutionsWithCRN(int k, int K, int k2, int K2, boolean verbose) {
        // init
        
        
        double[] averageCosts = new double[2];

        // TO DO: simulate (k, K) and (k2, K2) with CRN and store their average
        // costs in averageCosts
        Solution tempSol;
        averageCosts[0] = this.simulateSolution(k, K);
        if (this.kMin > k && k > this.kMax) {
        	System.out.println("k not in allowed range");
        }else if (this.KMin > K && K > this.KMax) {
        	System.out.println("K not in allowed range");
        }else {
        	tempSol = this.getSolution(k, K);
            tempSol.simResults.add(averageCosts[0]);
        }
        averageCosts[1] = this.simulateSolution(k2, K2, this.seed1, this.seed2);
        if (this.kMin > k2 && k2 > this.kMax) {
        	System.out.println("k2 not in allowed range");
        }else if (this.KMin > K2 && K2 > this.KMax) {
        	System.out.println("K2 not in allowed range");
        }else {
        	tempSol = this.getSolution(k2, K2);
            tempSol.simResults.add(averageCosts[1]);
        }

        if (verbose) {
            System.out.println("Average costs for (" + k + ", " + K + ") = " + averageCosts[0]);
            System.out.println("Average costs for (" + k2 + ", " + K2 + ") = " + averageCosts[1]);
        }

        return averageCosts;
    }

    
    
    
    // simulates numbSims-times (k, K) and (k2, K2) without and with CRN
    // and prints the results for their differences
    public void simulateTwoSolutionsMultipleTimes(int numbSims, int k, int K, int k2, int K2, boolean verbose) {
        // init
        TallyStore diffAverCostsNormal = new TallyStore("Difference average costs for normal simulation");
        TallyStore diffAverCostsCRN = new TallyStore("Difference average costs for CRN");
        // TO DO: simulate (k, K) and (k2, K2) without and with CRN multiple
        
        
       
        for (int i=0; i<numbSims; i++) {
        	double val1 = this.simulateSolution(k, K);
        	double val2 = this.simulateSolution(k2, K2);
        	diffAverCostsNormal.add(val1 - val2);
        }
        
        for (int i=0; i<numbSims; i++) {
        	double[] tempCRN = simulateTwoSolutionsWithCRN(k, K, k2, K2, false);
        	diffAverCostsCRN.add(tempCRN[0] - tempCRN[1]);
        }
        
        // times to get their differences and report their Tallystores
        // report results
        System.out.println(diffAverCostsNormal.report());
        System.out.println(diffAverCostsCRN.report());
    }
    
    
    public static void main(String[] args) {
        // threshold queue variables
        double lambda = 3/2; // arrival rate
        double muHigh = 6; // average service time
        double muLow = 2; // average service time
        double costsLow = 5; // costs per time unit when operating at low rate
        double costsHigh = 10; // costs per time unit when operating at high rate
        double stopTime = 10000; // simulation end time (seconds)
        // optimization variables
        int kMin = 5; // lowest possible value for k
        int kMax = 9; // highest possible value for k
        int KMin = 10; // lowest possible value for K
        int KMax = 20; // highest possible value for K
        int budget = 5000; // budget for the initial runs
        int initialRuns = 2500; // initial runs for the Ranking and selection method
        double alpha = 0.05; // alpha value for the Ranking and selection method
        int k = 5;  // k-threshold for queue
        int K = 20; // K-threshold for queue
        int k2 = 9; // k-threshold for alternative queue
        int K2 = 20; // K-threshold for alternative queue
        // Question 1
        Assignment3 CRN = new Assignment3(kMin, kMax, KMin, KMax, budget, lambda, muLow, muHigh, costsLow, costsHigh, stopTime);
        CRN.simulateTwoSolutionsWithCRN(k, K, k2, K2, true);
        // Question 2
        Assignment3 CRNMultipleTimes = new Assignment3(kMin, kMax, KMin, KMax, budget, lambda, muLow, muHigh, costsLow, costsHigh, stopTime);
        CRNMultipleTimes.simulateTwoSolutionsMultipleTimes(100, k, K, k2, K2, false);
        // Question 3
        Assignment3 localSearch = new Assignment3(kMin, kMax, KMin, KMax, budget, lambda, muLow, muHigh, costsLow, costsHigh, stopTime);
        Solution localSearchSolution = localSearch.runLocalSearch();
        localSearch.printSolutionResults(localSearchSolution);
        // Question 4
        Assignment3 rankingAndSelection = new Assignment3(kMin, kMax, KMin, KMax, budget, lambda, muLow, muHigh, costsLow, costsHigh, stopTime);
        rankingAndSelection.runRankingSelection(initialRuns, alpha, true);
        
rankingAndSelection.printSolutionResults(rankingAndSelection.getBestSimulatedSolution());
    }
	
}
